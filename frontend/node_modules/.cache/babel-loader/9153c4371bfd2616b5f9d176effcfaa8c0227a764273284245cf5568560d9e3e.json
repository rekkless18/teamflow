{"ast":null,"code":"import axios from 'axios';\nimport { format } from 'date-fns';\nconst API_URL = 'http://localhost:3001/api';\nexport let Priority = /*#__PURE__*/function (Priority) {\n  Priority[Priority[\"Low\"] = 1] = \"Low\";\n  Priority[Priority[\"Medium\"] = 2] = \"Medium\";\n  Priority[Priority[\"High\"] = 3] = \"High\";\n  Priority[Priority[\"Critical\"] = 4] = \"Critical\";\n  return Priority;\n}({});\n\n// 将日期对象格式化为YYYY-MM-DD字符串\nconst formatDate = date => {\n  if (typeof date === 'string') return date;\n  return format(date, 'yyyy-MM-dd');\n};\n\n// 创建API实例\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 获取所有版本\nexport const getAllVersions = async () => {\n  const response = await api.get('/versions');\n  return response.data;\n};\n\n// 获取单个版本\nexport const getVersionById = async id => {\n  const response = await api.get(`/versions/${id}`);\n  return response.data;\n};\n\n// 创建新版本\nexport const createVersion = async version => {\n  // 确保日期是字符串格式\n  const formattedVersion = {\n    ...version,\n    start_date: formatDate(version.start_date),\n    end_date: formatDate(version.end_date)\n  };\n  const response = await api.post('/versions', formattedVersion);\n  return response.data;\n};\n\n// 更新版本\nexport const updateVersion = async (id, version) => {\n  // 确保日期是字符串格式\n  const formattedVersion = {\n    ...version,\n    start_date: formatDate(version.start_date),\n    end_date: formatDate(version.end_date)\n  };\n  const response = await api.put(`/versions/${id}`, formattedVersion);\n  return response.data;\n};\n\n// 删除版本\nexport const deleteVersion = async id => {\n  await api.delete(`/versions/${id}`);\n};","map":{"version":3,"names":["axios","format","API_URL","Priority","formatDate","date","api","create","baseURL","headers","getAllVersions","response","get","data","getVersionById","id","createVersion","version","formattedVersion","start_date","end_date","post","updateVersion","put","deleteVersion","delete"],"sources":["D:/teamproject/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { format } from 'date-fns';\r\n\r\nconst API_URL = 'http://localhost:3001/api';\r\n\r\nexport interface Version {\r\n  id?: number;\r\n  name: string;\r\n  priority: number;\r\n  summary: string;\r\n  start_date: Date | string;\r\n  end_date: Date | string;\r\n  status: 'planning' | 'development' | 'testing' | 'release' | 'completed';\r\n  progress: number;\r\n  created_at?: Date | string;\r\n  updated_at?: Date | string;\r\n}\r\n\r\nexport enum Priority {\r\n  Low = 1,\r\n  Medium = 2,\r\n  High = 3,\r\n  Critical = 4\r\n}\r\n\r\n// 将日期对象格式化为YYYY-MM-DD字符串\r\nconst formatDate = (date: Date | string): string => {\r\n  if (typeof date === 'string') return date;\r\n  return format(date, 'yyyy-MM-dd');\r\n};\r\n\r\n// 创建API实例\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 获取所有版本\r\nexport const getAllVersions = async (): Promise<Version[]> => {\r\n  const response = await api.get('/versions');\r\n  return response.data;\r\n};\r\n\r\n// 获取单个版本\r\nexport const getVersionById = async (id: number): Promise<Version> => {\r\n  const response = await api.get(`/versions/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// 创建新版本\r\nexport const createVersion = async (version: Version): Promise<Version> => {\r\n  // 确保日期是字符串格式\r\n  const formattedVersion = {\r\n    ...version,\r\n    start_date: formatDate(version.start_date),\r\n    end_date: formatDate(version.end_date),\r\n  };\r\n  \r\n  const response = await api.post('/versions', formattedVersion);\r\n  return response.data;\r\n};\r\n\r\n// 更新版本\r\nexport const updateVersion = async (id: number, version: Version): Promise<Version> => {\r\n  // 确保日期是字符串格式\r\n  const formattedVersion = {\r\n    ...version,\r\n    start_date: formatDate(version.start_date),\r\n    end_date: formatDate(version.end_date),\r\n  };\r\n  \r\n  const response = await api.put(`/versions/${id}`, formattedVersion);\r\n  return response.data;\r\n};\r\n\r\n// 删除版本\r\nexport const deleteVersion = async (id: number): Promise<void> => {\r\n  await api.delete(`/versions/${id}`);\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,UAAU;AAEjC,MAAMC,OAAO,GAAG,2BAA2B;AAe3C,WAAYC,QAAQ,0BAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;;AAOpB;AACA,MAAMC,UAAU,GAAIC,IAAmB,IAAa;EAClD,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI;EACzC,OAAOJ,MAAM,CAACI,IAAI,EAAE,YAAY,CAAC;AACnC,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAgC;EAC5D,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,WAAW,CAAC;EAC3C,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,EAAU,IAAuB;EACpE,MAAMJ,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,aAAaG,EAAE,EAAE,CAAC;EACjD,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,MAAOC,OAAgB,IAAuB;EACzE;EACA,MAAMC,gBAAgB,GAAG;IACvB,GAAGD,OAAO;IACVE,UAAU,EAAEf,UAAU,CAACa,OAAO,CAACE,UAAU,CAAC;IAC1CC,QAAQ,EAAEhB,UAAU,CAACa,OAAO,CAACG,QAAQ;EACvC,CAAC;EAED,MAAMT,QAAQ,GAAG,MAAML,GAAG,CAACe,IAAI,CAAC,WAAW,EAAEH,gBAAgB,CAAC;EAC9D,OAAOP,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMS,aAAa,GAAG,MAAAA,CAAOP,EAAU,EAAEE,OAAgB,KAAuB;EACrF;EACA,MAAMC,gBAAgB,GAAG;IACvB,GAAGD,OAAO;IACVE,UAAU,EAAEf,UAAU,CAACa,OAAO,CAACE,UAAU,CAAC;IAC1CC,QAAQ,EAAEhB,UAAU,CAACa,OAAO,CAACG,QAAQ;EACvC,CAAC;EAED,MAAMT,QAAQ,GAAG,MAAML,GAAG,CAACiB,GAAG,CAAC,aAAaR,EAAE,EAAE,EAAEG,gBAAgB,CAAC;EACnE,OAAOP,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMW,aAAa,GAAG,MAAOT,EAAU,IAAoB;EAChE,MAAMT,GAAG,CAACmB,MAAM,CAAC,aAAaV,EAAE,EAAE,CAAC;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}