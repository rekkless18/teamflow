{"ast":null,"code":"import axios from 'axios';\nimport { format, parseISO } from 'date-fns';\n\n// 定义 Priority 枚举类型\nexport let Priority = /*#__PURE__*/function (Priority) {\n  Priority[\"LOW\"] = \"low\";\n  Priority[\"MEDIUM\"] = \"medium\";\n  Priority[\"HIGH\"] = \"high\";\n  Priority[\"CRITICAL\"] = \"critical\";\n  return Priority;\n}({});\n\n// 更新 Version 接口以包含缺失的属性\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/api' // 根据实际情况修改\n});\nconst formatDate = date => {\n  if (!date) return '';\n  if (typeof date === 'string') {\n    return format(parseISO(date), 'yyyy-MM-dd');\n  }\n  return format(date, 'yyyy-MM-dd');\n};\n\n// 获取所有版本\nexport const getAllVersions = async () => {\n  const response = await api.get('/versions');\n  return response.data;\n};\n\n// 获取单个版本\nexport const getVersionById = async id => {\n  const response = await api.get(`/versions/${id}`);\n  return response.data;\n};\n\n// 创建新版本\nexport const createVersion = async version => {\n  // 确保日期是字符串格式\n  const formattedVersion = {\n    ...version,\n    start_date: formatDate(version.start_date),\n    end_date: formatDate(version.end_date),\n    requirement_complete_date: formatDate(version.requirement_complete_date),\n    development_complete_date: formatDate(version.development_complete_date),\n    testing_complete_date: formatDate(version.testing_complete_date)\n  };\n  const response = await api.post('/versions', formattedVersion);\n  return response.data;\n};\n\n// 更新版本\nexport const updateVersion = async (id, version) => {\n  // 确保日期是字符串格式\n  const formattedVersion = {\n    ...version,\n    start_date: formatDate(version.start_date),\n    end_date: formatDate(version.end_date),\n    requirement_complete_date: formatDate(version.requirement_complete_date),\n    development_complete_date: formatDate(version.development_complete_date),\n    testing_complete_date: formatDate(version.testing_complete_date)\n  };\n  const response = await api.put(`/versions/${id}`, formattedVersion);\n  return response.data;\n};\n\n// 删除版本\nexport const deleteVersion = async id => {\n  await api.delete(`/versions/${id}`);\n};","map":{"version":3,"names":["axios","format","parseISO","Priority","api","create","baseURL","formatDate","date","getAllVersions","response","get","data","getVersionById","id","createVersion","version","formattedVersion","start_date","end_date","requirement_complete_date","development_complete_date","testing_complete_date","post","updateVersion","put","deleteVersion","delete"],"sources":["D:/teamproject/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { format, parseISO } from 'date-fns';\r\n\r\n// 定义 Priority 枚举类型\r\nexport enum Priority {\r\n    LOW = 'low',\r\n    MEDIUM = 'medium',\r\n    HIGH = 'high',\r\n    CRITICAL = 'critical'\r\n}\r\n\r\n// 更新 Version 接口以包含缺失的属性\r\nexport interface Version {\r\n    id: number;\r\n    name: string;\r\n    priority: Priority;\r\n    summary: string;\r\n    start_date: Date | string | undefined;\r\n    end_date: Date | string | undefined;\r\n    status: string;\r\n    progress: number;\r\n    requirement_complete_date: Date | string | undefined;\r\n    development_complete_date: Date | string | undefined;\r\n    testing_complete_date: Date | string | undefined;\r\n}\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3001/api', // 根据实际情况修改\r\n});\r\n\r\nconst formatDate = (date: Date | string | undefined): string => {\r\n    if (!date) return '';\r\n    if (typeof date === 'string') {\r\n        return format(parseISO(date), 'yyyy-MM-dd');\r\n    }\r\n    return format(date, 'yyyy-MM-dd');\r\n};\r\n\r\n// 获取所有版本\r\nexport const getAllVersions = async (): Promise<Version[]> => {\r\n    const response = await api.get('/versions');\r\n    return response.data;\r\n};\r\n\r\n// 获取单个版本\r\nexport const getVersionById = async (id: number): Promise<Version> => {\r\n    const response = await api.get(`/versions/${id}`);\r\n    return response.data;\r\n};\r\n\r\n// 创建新版本\r\nexport const createVersion = async (version: Version): Promise<Version> => {\r\n    // 确保日期是字符串格式\r\n    const formattedVersion = {\r\n        ...version,\r\n        start_date: formatDate(version.start_date),\r\n        end_date: formatDate(version.end_date),\r\n        requirement_complete_date: formatDate(version.requirement_complete_date),\r\n        development_complete_date: formatDate(version.development_complete_date),\r\n        testing_complete_date: formatDate(version.testing_complete_date),\r\n    };\r\n\r\n    const response = await api.post('/versions', formattedVersion);\r\n    return response.data;\r\n};\r\n\r\n// 更新版本\r\nexport const updateVersion = async (id: number, version: Version): Promise<Version> => {\r\n    // 确保日期是字符串格式\r\n    const formattedVersion = {\r\n        ...version,\r\n        start_date: formatDate(version.start_date),\r\n        end_date: formatDate(version.end_date),\r\n        requirement_complete_date: formatDate(version.requirement_complete_date),\r\n        development_complete_date: formatDate(version.development_complete_date),\r\n        testing_complete_date: formatDate(version.testing_complete_date),\r\n    };\r\n\r\n    const response = await api.put(`/versions/${id}`, formattedVersion);\r\n    return response.data;\r\n};\r\n\r\n// 删除版本\r\nexport const deleteVersion = async (id: number): Promise<void> => {\r\n    await api.delete(`/versions/${id}`);\r\n};\r\n    "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,QAAQ,QAAQ,UAAU;;AAE3C;AACA,WAAYC,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;;AAOpB;;AAeA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B,CAAE;AAC1C,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAIC,IAA+B,IAAa;EAC5D,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOP,MAAM,CAACC,QAAQ,CAACM,IAAI,CAAC,EAAE,YAAY,CAAC;EAC/C;EACA,OAAOP,MAAM,CAACO,IAAI,EAAE,YAAY,CAAC;AACrC,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAgC;EAC1D,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,WAAW,CAAC;EAC3C,OAAOD,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,EAAU,IAAuB;EAClE,MAAMJ,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,aAAaG,EAAE,EAAE,CAAC;EACjD,OAAOJ,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,MAAOC,OAAgB,IAAuB;EACvE;EACA,MAAMC,gBAAgB,GAAG;IACrB,GAAGD,OAAO;IACVE,UAAU,EAAEX,UAAU,CAACS,OAAO,CAACE,UAAU,CAAC;IAC1CC,QAAQ,EAAEZ,UAAU,CAACS,OAAO,CAACG,QAAQ,CAAC;IACtCC,yBAAyB,EAAEb,UAAU,CAACS,OAAO,CAACI,yBAAyB,CAAC;IACxEC,yBAAyB,EAAEd,UAAU,CAACS,OAAO,CAACK,yBAAyB,CAAC;IACxEC,qBAAqB,EAAEf,UAAU,CAACS,OAAO,CAACM,qBAAqB;EACnE,CAAC;EAED,MAAMZ,QAAQ,GAAG,MAAMN,GAAG,CAACmB,IAAI,CAAC,WAAW,EAAEN,gBAAgB,CAAC;EAC9D,OAAOP,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA,OAAO,MAAMY,aAAa,GAAG,MAAAA,CAAOV,EAAU,EAAEE,OAAgB,KAAuB;EACnF;EACA,MAAMC,gBAAgB,GAAG;IACrB,GAAGD,OAAO;IACVE,UAAU,EAAEX,UAAU,CAACS,OAAO,CAACE,UAAU,CAAC;IAC1CC,QAAQ,EAAEZ,UAAU,CAACS,OAAO,CAACG,QAAQ,CAAC;IACtCC,yBAAyB,EAAEb,UAAU,CAACS,OAAO,CAACI,yBAAyB,CAAC;IACxEC,yBAAyB,EAAEd,UAAU,CAACS,OAAO,CAACK,yBAAyB,CAAC;IACxEC,qBAAqB,EAAEf,UAAU,CAACS,OAAO,CAACM,qBAAqB;EACnE,CAAC;EAED,MAAMZ,QAAQ,GAAG,MAAMN,GAAG,CAACqB,GAAG,CAAC,aAAaX,EAAE,EAAE,EAAEG,gBAAgB,CAAC;EACnE,OAAOP,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA,OAAO,MAAMc,aAAa,GAAG,MAAOZ,EAAU,IAAoB;EAC9D,MAAMV,GAAG,CAACuB,MAAM,CAAC,aAAab,EAAE,EAAE,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}